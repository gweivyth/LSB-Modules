diff --git a/scripts/globals/automaton.lua b/scripts/globals/automaton.lua
index 9c785fc768..a8f1fe75e4 100644
--- a/scripts/globals/automaton.lua
+++ b/scripts/globals/automaton.lua
@@ -29,6 +29,7 @@ xi.automaton.abilities =
     STRING_SHREDDER = 2743,
     ARMOR_SHATTERER = 2744,
     HEAT_CAPACITOR  = 2745,
+    BARRAGE_TURBINE = 2746,
     DISRUPTOR       = 2747,
 }
 
@@ -73,6 +74,12 @@ local attachmentModifiers =
                                 { xi.mod.REGEN,                       {   nil,   nil,   nil,   nil }, true  }, },
     ['auto-repair_kit_iv']  = { { xi.mod.HPP,                         {    20,    20,    20,    20 }, false },
                                 { xi.mod.REGEN,                       {   nil,   nil,   nil,   nil }, true  }, },
+    ['barrier_module']      = { { xi.mod.SHIELDBLOCKRATE,             {     5,    10,    20,    30 }, true  },
+                                { xi.mod.SHIELD_MASTERY_TP,           {     0,     5,    10,    15 }, true  },
+                                { xi.mod.AUTO_SHIELD_BASH_DELAY,      {     0,     5,    10,    15 }, true  }, },
+    ['barrier_module_ii']   = { { xi.mod.SHIELDBLOCKRATE,             {    10,    15,    25,    35 }, true  },
+                                { xi.mod.SHIELD_MASTERY_TP,           {     0,    10,    15,    20 }, true  },
+                                { xi.mod.AUTO_SHIELD_BASH_DELAY,      {     0,    10,    15,    20 }, true  }, },
     ['coiler']              = { { xi.mod.DOUBLE_ATTACK,               {     3,    10,    20,    30 }, true  }, },
     ['coiler_ii']           = { { xi.mod.DOUBLE_ATTACK,               {    10,    15,    25,    35 }, true  }, },
     ['damage_gauge']        = { { xi.mod.AUTO_HEALING_THRESHOLD,      {    30,    40,    50,    75 }, true  },
@@ -100,6 +107,8 @@ local attachmentModifiers =
     ['magniplug_ii']        = { { xi.mod.MAIN_DMG_RATING,             {    10,    20,    35,    50 }, true  },
                                 { xi.mod.RANGED_DMG_RATING,           {    10,    20,    35,    50 }, true  }, },
     ['mana_booster']        = { { xi.mod.AUTO_MAGIC_DELAY,            {     2,     4,     6,     8 }, false }, },
+    ['mana_channeler']      = { { xi.mod.MATT,                        {    10,    20,    30,    40 }, true  },
+                                { xi.mod.AUTO_MAGIC_DELAY,            {    -3,    -6,    -9,   -12 }, false }, },
     ['mana_conserver']      = { { xi.mod.CONSERVE_MP,                 {    15,    30,    45,    60 }, true  }, },
     ['mana_jammer']         = { { xi.mod.MDEF,                        {    10,    20,    30,    40 }, true  }, },
     ['mana_jammer_ii']      = { { xi.mod.MDEF,                        {    20,    30,    40,    50 }, true  }, },
@@ -116,7 +125,9 @@ local attachmentModifiers =
     ['optic_fiber']         = { { xi.mod.AUTO_PERFORMANCE_BOOST,      {    10,    20,    25,    30 }, false }, },
     ['optic_fiber_ii']      = { { xi.mod.AUTO_PERFORMANCE_BOOST,      {    15,    30,    37,    45 }, false }, },
     ['percolator']          = { { xi.mod.COMBAT_SKILLUP_RATE,         {     5,    10,    15,    20 }, true  }, },
-    ['repeater']            = { { xi.mod.DOUBLE_SHOT_RATE,            {    10,    15,    35,    65 }, true  }, },
+    ['repeater']            = { { xi.mod.DOUBLE_SHOT_RATE,            {     9,    14,    34,    64 }, true  }, },
+    ['resister']            = { { xi.mod.STATUSRES,                   {     5,    10,    20,    30 }, true  }, },
+    ['resister_ii']         = { { xi.mod.STATUSRES,                   {    10,    20,    40,    60 }, true  }, },
     ['scanner']             = { { xi.mod.AUTO_SCAN_RESISTS,           {     0,     1,     1,     1 }, false }, },
     ['schurzen']            = { { xi.mod.AUTO_SCHURZEN,               {     0,     1,     1,     1 }, false }, },
     ['scope']               = { { xi.mod.RACC,                        {    10,    20,    30,    40 }, true  }, },

diff --git a/src/map/ai/controllers/automaton_controller.cpp b/src/map/ai/controllers/automaton_controller.cpp
index 052935cdff..6d0f69968b 100644
--- a/src/map/ai/controllers/automaton_controller.cpp
+++ b/src/map/ai/controllers/automaton_controller.cpp
@@ -235,7 +235,8 @@ void CAutomatonController::Move()
 
 bool CAutomatonController::TryAction()
 {
-    if (m_Tick > m_LastActionTime + (m_actionCooldown - std::chrono::milliseconds(PAutomaton->getMod(Mod::AUTO_DECISION_DELAY) * 10)))
+    int16 dcn_del = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_DECISION_DELAY));
+    if (m_Tick > m_LastActionTime + (m_actionCooldown - std::chrono::milliseconds(dcn_del * 10)))
     {
         m_LastActionTime = m_Tick;
         PAutomaton->PAI->EventHandler.triggerListener("AUTOMATON_AI_TICK", CLuaBaseEntity(PAutomaton), CLuaBaseEntity(PTarget));
@@ -248,10 +249,11 @@ bool CAutomatonController::TryAction()
 
 bool CAutomatonController::TryShieldBash()
 {
+    int16 sld_del = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_SHIELD_BASH_DELAY));
     CState* PState = PTarget->PAI->GetCurrentState();
 
     if (m_shieldbashCooldown > 0s && PState && PState->CanInterrupt() &&
-        m_Tick > m_LastShieldBashTime + (m_shieldbashCooldown - std::chrono::seconds(PAutomaton->getMod(Mod::AUTO_SHIELD_BASH_DELAY))))
+        m_Tick > m_LastShieldBashTime + (m_shieldbashCooldown - std::chrono::seconds(sld_del)))
     {
         return MobSkill(PTarget->targid, m_ShieldBashAbility);
     }
@@ -261,8 +263,9 @@ bool CAutomatonController::TryShieldBash()
 
 bool CAutomatonController::TrySpellcast(const CurrentManeuvers& maneuvers)
 {
+    int16 mag_del = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_MAGIC_DELAY));
     if (!PAutomaton->PMaster || m_magicCooldown == 0s ||
-        m_Tick <= m_LastMagicTime + (m_magicCooldown - std::chrono::seconds(PAutomaton->getMod(Mod::AUTO_MAGIC_DELAY))) || !CanCastSpells())
+        m_Tick <= m_LastMagicTime + (m_magicCooldown - std::chrono::seconds(mag_del)) || !CanCastSpells())
     {
         return false;
     }
@@ -421,8 +424,9 @@ bool CAutomatonController::TrySpellcast(const CurrentManeuvers& maneuvers)
 
 bool CAutomatonController::TryHeal(const CurrentManeuvers& maneuvers)
 {
+    int16 heal_del = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_HEALING_DELAY));
     if (!PAutomaton->PMaster || m_healCooldown == 0s ||
-        m_Tick <= m_LastHealTime + (m_healCooldown - std::chrono::seconds(PAutomaton->getMod(Mod::AUTO_HEALING_DELAY))))
+        m_Tick <= m_LastHealTime + (m_healCooldown - std::chrono::seconds(heal_del)))
     {
         return false;
     }
@@ -444,7 +448,9 @@ bool CAutomatonController::TryHeal(const CurrentManeuvers& maneuvers)
             break;
     }
 
-    threshold                  = std::clamp<float>(threshold + PAutomaton->getMod(Mod::AUTO_HEALING_THRESHOLD), 30.f, 90.f);
+    int16 heal_thr = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_HEALING_THRESHOLD));
+
+    threshold                  = std::clamp<float>(threshold + heal_thr, 30.f, 90.f);
     CBattleEntity* PCastTarget = nullptr;
 
     bool          haveHate   = false;
@@ -1574,10 +1580,11 @@ bool CAutomatonController::TryTPMove()
 
 bool CAutomatonController::TryRangedAttack() // TODO: Find the animation for its ranged attack
 {
+    int16 rng_del = (int16)(0.f + PAutomaton->getMod(Mod::AUTO_RANGED_DELAY));
     if (PAutomaton->getFrame() == FRAME_SHARPSHOT)
     {
         duration minDelay   = PAutomaton->getHead() == AUTOHEADTYPE::HEAD_SHARPSHOT ? 5s : 10s;
-        duration attackTime = m_rangedCooldown - std::chrono::seconds(PAutomaton->getMod(Mod::AUTO_RANGED_DELAY));
+        duration attackTime = m_rangedCooldown - std::chrono::seconds(rng_del);
 
         if (m_rangedCooldown > 0s && m_Tick > m_LastRangedTime + std::max(attackTime, minDelay))
         {
